# 압축기 진단 시스템 - GitHub Actions 배포 워크플로우
name: Deploy Compressor Diagnosis System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 코드 품질 검사
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: 코드 스타일 검사 (flake8)
      run: |
        # 기본적인 오류만 체크 (프로덕션에서는 더 엄격하게 설정 가능)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 경고 포함 전체 검사 (실패하지 않음)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Docker 이미지 빌드 및 테스트
  build-and-test:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: 컨테이너 이미지 빌드
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 컨테이너 테스트 실행
      run: |
        # 이미지가 정상적으로 빌드되었는지 확인
        docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        
        # 간단한 컨테이너 시작 테스트
        docker run --name test-container -d \
          -e KAKAO_CLIENT_ID=test \
          -e KAKAO_CLIENT_SECRET=test \
          -e SECRET_KEY=test-secret-key \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        
        # 컨테이너 상태 확인
        sleep 30
        docker ps -a
        
        # 로그 확인
        docker logs test-container
        
        # 정리
        docker stop test-container
        docker rm test-container

  # GitHub Container Registry에 배포
  deploy-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 배포 성공 알림
      run: |
        echo "🎉 이미지가 성공적으로 배포되었습니다!"
        echo "📦 이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "🏷️  태그: ${{ steps.meta.outputs.tags }}"

  # 추가 배포 대상 (예: AWS, Azure, GCP)
  deploy-to-cloud:
    needs: deploy-to-registry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 클라우드 배포 준비
      run: |
        echo "🚀 클라우드 배포를 준비합니다..."
        echo "이 단계에서는 다음을 수행할 수 있습니다:"
        echo "- AWS ECS/EKS 배포"
        echo "- Azure Container Instances 배포" 
        echo "- Google Cloud Run 배포"
        echo "- 기타 클라우드 서비스 배포"
        echo ""
        echo "각 클라우드 제공업체별 배포 스크립트를 추가하세요."

    # AWS 배포 예시 (주석 처리됨)
    # - name: AWS 자격 증명 구성
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ap-northeast-2
    #
    # - name: AWS ECS 배포
    #   run: |
    #     aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment

    # Google Cloud 배포 예시 (주석 처리됨)
    # - name: GCP 인증
    #   uses: google-github-actions/auth@v1
    #   with:
    #     credentials_json: ${{ secrets.GCP_SA_KEY }}
    #
    # - name: Cloud Run 배포
    #   run: |
    #     gcloud run deploy compressor-diagnosis \
    #       --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
    #       --platform managed \
    #       --region asia-northeast1

    - name: 배포 완료 알림
      run: |
        echo "✅ 모든 배포 단계가 완료되었습니다!"
        echo "🌐 서비스 URL을 확인하고 정상 동작하는지 테스트해주세요."


name: Deploy Compressor Diagnosis System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 코드 품질 검사
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: 코드 스타일 검사 (flake8)
      run: |
        # 기본적인 오류만 체크 (프로덕션에서는 더 엄격하게 설정 가능)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 경고 포함 전체 검사 (실패하지 않음)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Docker 이미지 빌드 및 테스트
  build-and-test:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: 컨테이너 이미지 빌드
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 컨테이너 테스트 실행
      run: |
        # 이미지가 정상적으로 빌드되었는지 확인
        docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        
        # 간단한 컨테이너 시작 테스트
        docker run --name test-container -d \
          -e KAKAO_CLIENT_ID=test \
          -e KAKAO_CLIENT_SECRET=test \
          -e SECRET_KEY=test-secret-key \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        
        # 컨테이너 상태 확인
        sleep 30
        docker ps -a
        
        # 로그 확인
        docker logs test-container
        
        # 정리
        docker stop test-container
        docker rm test-container

  # GitHub Container Registry에 배포
  deploy-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 배포 성공 알림
      run: |
        echo "🎉 이미지가 성공적으로 배포되었습니다!"
        echo "📦 이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "🏷️  태그: ${{ steps.meta.outputs.tags }}"

  # 추가 배포 대상 (예: AWS, Azure, GCP)
  deploy-to-cloud:
    needs: deploy-to-registry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 클라우드 배포 준비
      run: |
        echo "🚀 클라우드 배포를 준비합니다..."
        echo "이 단계에서는 다음을 수행할 수 있습니다:"
        echo "- AWS ECS/EKS 배포"
        echo "- Azure Container Instances 배포" 
        echo "- Google Cloud Run 배포"
        echo "- 기타 클라우드 서비스 배포"
        echo ""
        echo "각 클라우드 제공업체별 배포 스크립트를 추가하세요."

    # AWS 배포 예시 (주석 처리됨)
    # - name: AWS 자격 증명 구성
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ap-northeast-2
    #
    # - name: AWS ECS 배포
    #   run: |
    #     aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment

    # Google Cloud 배포 예시 (주석 처리됨)
    # - name: GCP 인증
    #   uses: google-github-actions/auth@v1
    #   with:
    #     credentials_json: ${{ secrets.GCP_SA_KEY }}
    #
    # - name: Cloud Run 배포
    #   run: |
    #     gcloud run deploy compressor-diagnosis \
    #       --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
    #       --platform managed \
    #       --region asia-northeast1

    - name: 배포 완료 알림
      run: |
        echo "✅ 모든 배포 단계가 완료되었습니다!"
        echo "🌐 서비스 URL을 확인하고 정상 동작하는지 테스트해주세요."










